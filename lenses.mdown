% Lenses
% Alex Mason
% March 2016

# A Refresher
## What are lenses

Lenses allow us to focus in on values within a larger, nested structure.

Focus means, roughly, `get`, `set` and `modify`.

They were born out of the pain of dealing with records in Haskell (more on this later).

## Last month's definition

```haskell
data Lens a b
  = Lens
    { get :: a -> b
    , set :: b -> a -> a
    }


_1 :: Lens (a,b) a
_1 = Lens (\(x,_) -> x)   (\x' (_,y) -> (x',y))

_2 :: Lens (a,b) b
_2 = Lens (\(_,y) -> y)   (\y' (x,_) -> (x,y'))
```

## Functions on lenses

```haskell
-- Lens composition
(>-) :: Lens a b -> Lens b c -> Lens a c
l >- r = Lens (get r . get l)
              -- new :: c
              -- whole :: a
              (\new whole ->
               let inner  = get l whole     -- :: b
                   inner' = set r new inner -- :: b
               in set l inner' whole)

-- A lens focusing on the b in a ((a,b),c)
_1 >- _2 :: Lens ((a,b),c) b

-- Apply a function which modifys `b`s in an `a` focused by a lens
over :: Lens a b -> (b -> b) -> a -> a
over l a = set l (f (get l a))
```

# Concrete example

## Personal Info

```haskell
data Person = Person
  { _firstname :: String
  , _lastname  :: String
  , _initials  :: String
  , _phNums    :: [PNumber]
  , _addresses :: [Address]}

data PNumber = PNumber
  { _name   :: String
  , _type   :: String -- Home, Work, Mobile, Fax, etc.
  , _digits :: [Int]
  }

data Address = Address
  { _purpose  :: String     -- Home, Work, Delivery, etc.
  , _unit     :: Maybe Int
  , _streetNo :: Int
  , _street   :: String
  , _suburb   :: String
  , _state    :: String
  , _postCode :: Int
  }
```

<div style="font-size: 50%">
*Some of the choices of data type above are dubious see*

*[Falsehoods programmers believe about addresses](https://www.mjt.me.uk/posts/falsehoods-programmers-believe-about-addresses/)*

*[Falsehoods programmers believe about names](http://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/)*
</div>

## Person Lenses

```haskell
firstname, lastname, initials :: Lens Person String
firstname = Lens _firstname -- The getter for the _firstname field
                 (\name' person -> person{_firstname = name'})
                 --                      ^^^ Record update syntax
                 --                 The returned value is `person`
                 --                 with all fields not mentioned copied.
lastname = ...

phNums :: Lens Person [PNumber]
phNums = Lens _phNums 
              (\nums' person -> person{_phNums = nums'})



```

# What more could we want?

## Polymorphic update

We know we can apply a function to the focus, but only `b -> b`. What if we want:

```haskell
f :: Int -> String
over :: Lens a b -> (b -> b) -> a -> a -- From before

x :: (Int,Bool)
x = (7,True)

y :: (String,Bool)
y = over f _1 x -- Nope, can't do that
```
  
## Focus on multiple values
If we have a `(a,a)`, we might want a lens `Lens (a,a) a` which gives us access to **both** `a`'s or:

```haskell
-- A lens giving us access to all Strings in an address
-- so we can make them all consistent case
addressStrings :: Lens Address String
...

personStrings :: Lens Person String
...
```

## Partiality

How do we deal with types like `Either`
```haskell
data Either a b = Left a | Right b

_Left :: Lens (Either a b) a
_Left = Lens (\e -> case e of
                Left a -> a
                Right b -> error "Left Expected")
              ... -- setter even harder
```

# Some experiments

## A small refactor


```haskell
data Lens a b
  = Lens
    { get :: a -> b
    , set :: b -> a -> a
    }

-- Becomes

data Lens a b
  = Lens
    { get :: a -> b
    , set :: a -> b -> a -- Arguments flipped
    }
```

## Refactor...

```haskell
data Lens a b
  = Lens
    { get :: a -> b
    , set :: a -> b -> a -- Arguments flipped
    }
-- Becomes this, also isomorphic
data Lens a b
  = Lens
    { getSet :: a -> (b,b -> a)
    }

get :: Lens a b -> a -> b
get (Lens f) a = fst (f a)

set :: Lens a b -> b -> a -> a
set (Lens f) new a = snd (f a) new
```
<span style="font-size: 50%">This is based on the Store Comonad -- it doesn't buy us much. </span>
```haskell
data Store s a = Store (s -> a) s
-- Isomorphic to (s -> a, s)
```

## Polymorphism
```haskell
data Lens a a' b b' = Lens 
  {
  get :: a -> b        -- Same as above, the current focus
  set :: a -> b' -> a' -- A function to replace the focus, polymorphically
  }

-- Now we can write:
_1 :: Lens (a,c) (b,c) a b
_1 = Lens (\(a,c) -> (a,\b -> (b,c)))
```
<small>We can change types!</small>
```haskell
(>->) :: Lens s t a b -> Lens a b x y -> Lens s t x y
(Lens get1 set1) >-> (Lens get2 set2) = 
  Lens (get2 . get1)
       (\s b -> set1 s (set2 b (get1 s) x))
```

<small>But still a pain, not very efficient, and lots of features are still missing.</small>

# Along came Twan
## Along came Twan

Twan van Laarhoven, one of the demigods of the Haskell world, had an idea...*

```haskell
type Lens' a b =
  forall f. Functor f => (b -> f b) -> (a -> f a)
```
<small>* many more people and much research involved</small>

## What the Functor?
```haskell
class Functor f where
  fmap :: (a -> b) -> (f a -> f b)










...
```

## What the Functor?
```haskell
class Functor f where
  fmap :: (a -> b) -> (f a -> f b)

newtype Identity a = Identity {runIdentity :: a}




newtype Const x a = Const {runConst :: x} -- a is a phantom type



...
```

## What the Functor?
```haskell
class Functor f where
  fmap :: (a -> b) -> (f a -> f b)

newtype Identity a = Identity {runIdentity :: a}
instance Functor Identity where
  fmap :: (a -> b) -> (Identity a -> Identity b)


newtype Const x a = Const {runConst :: x} -- a is a phantom type
instance Functor (Const x) where
  fmap :: (a -> b) -> (Const x a -> Const x b)

...
```

## What the Functor?
```haskell
class Functor f where
  fmap :: (a -> b) -> (f a -> f b)

newtype Identity a = Identity {runIdentity :: a}
instance Functor Identity where
  fmap :: (a -> b) -> (Identity a -> Identity b)
  fmap f (Identity x) = Identity (f x)

newtype Const x a = Const {runConst :: x} -- a is a phantom type
instance Functor (Const x) where
  fmap :: (a -> b) -> (Const x a -> Const x b)

...
```


## What the Functor?
```haskell
class Functor f where
  fmap :: (a -> b) -> (f a -> f b)

newtype Identity a = Identity {runIdentity :: a}
instance Functor Identity where
  fmap :: (a -> b) -> (Identity a -> Identity b)
  fmap f (Identity x) = Identity (f x)

newtype Const x a = Const {runConst :: x} -- a is a phantom type
instance Functor (Const x) where
  fmap :: (a -> b) -> (Const x a -> Const x b)
  fmap _f (Const x) = Const x -- f maps over the 'a' in Const x a,
                              -- and there are no 'a's
```

## What's it buy

```haskell
set :: Lens' a b 
    -> b
    -> a
    -> a
set len b' a =
  ...




type Lens' a b =
  forall f. Functor f => (b -> f b) -> (a -> f a)
...
```


## What's it buy

```haskell
set :: Lens' a b 
    -> b
    -> a
    -> a
set len b' a =
  let f _ = Identity b'    -- b -> Identity b
  ...



type Lens' a b =
  forall f. Functor f => (b -> f b) -> (a -> f a)
                         ----------
```

## What's it buy

```haskell
set :: Lens' a b 
    -> b
    -> a
    -> a
set len b' a =
  let f _ = Identity b'    -- b -> Identity b
      len' = len f         -- a -> Identity a
  ...


type Lens' a b =
  forall f. Functor f => (b -> f b) -> (a -> f a)
                                       ----------
```

## What's it buy

```haskell
set :: Lens' a b 
    -> b
    -> a
    -> a
set len b' a =
  let f _ = Identity b'    -- b -> Identity b
      len' = len f         -- a -> Identity a
  in runIdentity (len' a)  -- a


type Lens' a b =
  forall f. Functor f => (b -> f b) -> (a -> f a)
...
```

## What's it buy

```haskell
set :: Lens' a b 
    -> b
    -> a
    -> a
set len b' a =
  let f _ = Identity b'    -- b -> Identity b
      len' = len f         -- a -> Identity a
  in runIdentity (len' a)  -- a

-- Or
  set len b' a = runIdentity (len (\_ -> Identity b))
```

## Getters looks similar...
```haskell
set :: Lens' a b 
    -> a
    -> a
get len a =
  let f x = Const x     -- b -> Const b b 
                        -- Remember, the second 'b' is a phantom type
      len' = len f      -- a -> Const b a
                        -- Outer Const contains the 'b' we're getting
  in runConst (len' a)  -- a             

-- Or
  get len a = runConst (len (\b -> Const b))

-- Or just
  get len a = runConst (len Const)
```

## Modify looks really familiar

```haskell
modify :: Lens' a b 
    -> (b -> b)
    -> a
    -> a
modify len mod a =
  let f b  = Identity (mod b) -- b -> Identity b
      len' = len f            -- a -> Identity a
  in runIdentity (len' a)     -- a

-- Or
  modify len mod a = runIdentity (len (\b -> Identity (mod b))
```

# Writing lenses
## Writing lenses

```haskell
_1 :: Lens' (a,b) a
_1 f (a,b) = fmap (\a' -> (a,b)) (f a)

_2 :: Lens' (a,b) b
_2 f (a,b) = fmap (\b' -> (a,b)) (f b)

firstname :: Lens' Person String 
          -- a.k.a: Functor f 
          --        => (String -> f String)
          --        -> (Address -> f Address)
firstname fstrstr address = 
  fmap 
    (\fname -> address{_firstname = fname}) -- :: String -> Address
    (fstrstr (_firstname address))          -- :: f String
                                            -- Therefore :: f Address
```

<small>Given a function from `(b -> f b)` for some functor `f`, a lens can give you a function `(a -> f a)`, by giving a `b` to the function, and then placing the new `b` in the old piece of data.
</small>

## Composition

So how do we compose these things?

* Lenses are just functions...
* Can we just... compose them?


## Lets find out
```haskell
(.) :: (a -> b)
    -> (b -> c)
    -> (a -> c)
f . g = \x -> f (g x)

x :: Lens' a b
y :: Lens' b c
```

## Lets find out
```haskell
(.) :: (a -> b) 
    -> (b -> c)
    -> (a -> c)
f . g = \x -> f (g x)

x :: Functor f => (b -> f b) -> (a -> f a)
y :: Functor f => (c -> f c) -> (c -> f c)
```

## Lets find out
```haskell
(.) :: Lens' b c -- a = (c -> f c)
    -> Lens' a b -- b = (b -> f b) --- eh???
    -> Lens' a c -- c = (a -> f a)
f . g = \x -> f (g x)

x :: Functor f => (b -> f b) -> (a -> f a)
y :: Functor f => (c -> f c) -> (b -> f b)
```

## Lets find out
```haskell
(.) :: ((c -> f c) -> (b -> f b)) -- a = (c -> f c)
    -> ((b -> f b) -> (a -> f a)) -- b = (b -> f b)
    -> ((c -> f c) -> (a -> f a)) -- c = (a -> f a)
f . g = \x -> f (g x)

x :: Functor f => (b -> f b) -> (a -> f a)
y :: Functor f => (c -> f c) -> (b -> f b)
```
## Lets find out
```haskell
(.) :: ((c -> f c) -> (b -> f b)) -- a = (c -> f c)
    -> ((b -> f b) -> (a -> f a)) -- b = (b -> f b)
    -> ((c -> f c) -> (a -> f a)) -- c = (a -> f a)
f . g = \x -> f (g x)

x :: Functor f => (b -> f b) -> (a -> f a) -- Lens a b
y :: Functor f => (c -> f c) -> (b -> f b) -- Lens b c

y . x :: Lens a b -- Notice the order is reversed!
```

## How do we use them
```haskell
-- if we have
x :: (Int,(String,Address))
x = (2,("Hello",someAddress))

modify _1 (*3) x                       -- (6,("Hello",someAddress))
modify (_2._1) (map toUpper) x         -- (2,("HELLO",someAddress))
modify (_2._2.firstname) (map toUpper) -- ... the same with with an all uppercase first name
```

---------------

# Real world examples

## Wreq

```haskell
get :: String -> IO (Response ByteString)
r <- get "http://myservice.io/address"
```

## Aeson

Aeson is the go-to JSON library in Haskell.

```haskell
data Value = Object !Object
           | Array !Array
           | String !Text
           | Number !Scientific
           | Bool !Bool
           | Null
type Object = HashMap Text Value
type Array = Vector Value
```

## <span style="text-transform: none">ToJSON & FromJSON</span>

```haskell
data Address = Address { _purpose  :: String
  , _unit     :: Maybe Int, _streetNo :: Int
  , _street   :: String   , _suburb   :: String
  , _state    :: String   , _postCode :: Int }

instance ToJSON Address where
  toJSON Address{..} = object ["purpose" .= _purpose
    ,"unit"    .= _unit   ,"streetNo" .= _streetNo
    ,"street"  .= _street ,"suburb"   .= _suburb
    ,"state"   .= _state  ,"postcode" .= _postcode ]

instance FromJSON Address where
  parseJSON = withObject "Address" $ \o -> Address
      <$> o .: "purpose"<*> o .: "unit"   <*> o .: "streetNo"
      <*> o .: "street" <*> o .: "suburb" <*> o .: "state"
      <*> o .: "postcode"
```

## Encoding

```haskell
encode :: ToJSON a => a -> ByteString

encode (Address "Home" Nothing 7 "London Circuit" "City" "ACT" 2601)
```
becomes
```json
{
  "purpose": "Home",
  "unit": null,
  "street": "London Circuit",
  "suburb": "City",
  "state" : "ACT",
  "postcode": 2601
}
```
 
## Aeson-Lens

A wrapper around Aeson which gives lenses for interacting with Aeson `Value`


# Practical lenses

## More than lens

```haskell
Iso a b  -- a bidirectional transformation between a and b,
         -- An isomorphism

Getter a b -- Can extract a b from an a, but not set
Setter a b -- Can set but not get

Lens a b -- focuses on a b inside an a

Prism a b -- Might point to a b inside an a
          -- Used for sum types

Travsersal a b -- Multifocus on 0 or more b's in an a
               -- Consider Traversal [a] a
```

## Iso

Isos allow for bidirectional transformation between two types

```haskell
-- Convert between a [Char] and Text
packed :: Iso String Text

-- We can flip the order because it's bidirectional
from :: Iso a b -> Iso b a

from packed :: Iso Text String

-- Has this law on some Iso `l`
from (from l) ≡ l

-- If the value doesn't exist we can use the default value
-- handy for maps where you want to assume there
-- is definitely a value
non :: a -> Iso (Maybe a) a
```

## Getter

Getters are often used when you have a function `a -> b` that you want to compose with other lenslike things
```haskell
to :: (a -> b) -> Getter a b

(^.) :: a -> Getter a b -> b
-- Lens is pretty operator heavey...

("hello","world") ^. to snd
==> "world"

("hello","world") ^. to snd . to (map toUpper)
==> "WORLD"
```

## Getter

Can be used in `Reader s` or `State s` using `view :: MonadReader s m => Getter s a -> m a`

```haskell
myReaderThing :: Reader (Int,Bool) String
myReaderThing = do
  int <- view $ to fst
  bool <- view $ to snd
  return (show int ++ show bool)

runReader myReaderThing (7,False)
==> "7False"
```

## Setter

As you'd expect, used to set values, this can mean more than one value

```haskell
_2 :: Setter (a,b) b

set :: Setter a b -> b -> a -> a
-- a.k.a
(.~) :: Setter a b -> b -> a -> a

(1,"hello") & _2 .~ "world"
==> (1,"world")

-- We can also apply a function to all the focii of a Setter
both :: Setter (a,a) a

(1,2) & both %~ (+100)
==> (101,102)

-- There's also some imperativly familliar functions
(1,2) & _2 *~ 30
==> (1,60)
```

## Setter

We can use setters inside `State` too

```haskell
assign :: MonadState s m => Setter a b -> b -> m ()
-- a.k.a
(.=) :: Setter a b -> b -> m ()

_1 :: Setter (a,b) a
_2 :: Setter (a,b) b

myStatefulThing :: State (Int,Bool) String
myStatefulThing = do
  _1 .= 7
  _2 .= True
  (int,bool) <- get
  return (show int ++ show bool)

runState myStatefulThing (0,False)
==> "7True"
```

## Lens

Points to a `b` inside an `a`, has several laws, for some lens `l`:

```haskell
set  :: Lens a b -> b -> a -> a
view :: Lens a b      -> a -> b

-- 1) You get back what you put in
view l (set l v s)  ≡ v
-- 2) Putting back what you got doesn't change anything
set l (view l s) s  ≡ s
-- 3) Setting twice is the same as setting once
set l v' (set l v s) ≡ set l v' s

-- Look familliar?
lens :: (a -> b)      -- getter
     -> (a -> b -> a) -- setter
     -> Lens a b      
```

## Lens

```haskell
data Tagged a = Tagged {_tag :: String, _val :: a}

tag :: Lens (Tagged a) String
val :: Lens (Tagged a) a

-- Lenses are Setters and Getters
myTagged = Tagged "My Tag" True

myTagged ^. tag
==> "My Tag"
myTag & val .~ False
==> Tagged "My Tag" False
-- We can apply functions
myTagged & tag %~ map toUpper
==> Tagged "MY TAG" True
```

## Traversal
Things start getting more useful than OOP. Haskell's `Traversable` has the following functions
```haskell
traverse :: (Traversable t, Applicative f)
         => (a -> f b) -> t a -> f (t b)
-- When applied to lists, it's mapM
traverse :: (Traversable t, Applicative f)
         => (a -> f b) -> [a] -> f [b]
-- On Maybe, it's 'run this action if there's an `a`'
traverse :: (Traversable t, Applicative f)
         => (a -> f b) -> Maybe a -> f (Maybe b)

traverse print [1,2,3]
==> "1"
==> "2"
==> "3"
[(),(),()]

traverse print (Just 4)
==> "4"
Just ()

```

## Traversal

A traversal is similar, but doesn't need to be applied to something of kind `* -> *`

```haskell
-- Focuses on every String in an address
-- first and last name, street etc.
addressStrings :: Traversal Address String

-- Lets you focus on all values in a Map
values :: Traversal (Map k v) v

```

## Traversal

Used for zero or more a's, can be used to extract all a's, or the first

``` haskell
listOf :: Traversal a b -> a -> [b]
-- Also known as:
(^..) :: a -> Traversal a b -> [b]

preview :: Traversal a b -> a -> Maybe b
-- a.k.a
(^?) :: a -> Traversal a b -> Maybe b

someAddress ^.. addressStrings
==> ["John","Doe","7 London circuit","Australia",...]

someAddress ^? addressStrings
==> Just "John"
```

## Prism

Prisms are most commonly used with sum types, represent partial transformations, is a traversal focusing on at most one element

```haskell
_Left :: Prism (Either e a) e
_Just :: Prism (Maybe a)    a
```
But not always
```haskell
-- Fails if the integer is negative
nat :: Prism Integer Natural

-- Returns an `a` if it can be parsed from the String
_Show :: Read a => Prism String a 
      -- Yes that is its name ¯\_(ツ)_/¯
          -- It's actually consistent but unintuitive
```

## Prism

What separates a prism from a traversal is it can be used like a constructor
```haskell

re :: Prism a b -> Getter b a

-- Remember that (^.) runs a Getter on an a to get a b
5 ^. re _Left
==> Left 5

5 ^. re _Show
==> "5"

-- Getting a bit more tricky, we can compose these...
5 ^. re (_Show._Left)
==> "Left 5"
```

## Composition

This seems like a lot of concepts, but what is nice is that they all compose

Composition is just normal function composition, but because of the Van Laarhoven construction, it looks backwards

```haskell
someLens :: Lens a b
someSetter :: Setter b c
someLens . someSetter :: Setter a c
```
Any `Lens` is both a valid getter and setter, as you'd expect - it points to exactly one value which will always exist inside the larger value

## Composition

Composition will give the most constrained type of all the composed elements

A `Traversal` is more powerful than a Getter, so composing a Traversal and a Getter gives a Getter





# References

## References

* [Lenses from the ground up](https://speakerdeck.com/markhibberd/lens-from-the-ground-up) Mark Hibberd
* [Polymorphic Update with van Laarhoven Lenses](http://r6.ca/blog/20120623T104901Z.html)
